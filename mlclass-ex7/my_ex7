# -*- coding: utf-8 -*-
import numpy as np
import scipy.io as scio
import matplotlib.pyplot as plt

data1 = scio.loadmat('ex7data1.mat')  
xdata1=data1['X'] 
print xdata1.shape

data2 = scio.loadmat('ex7data2.mat')   
xdata2=data2['X']
print xdata2.shape

data3 = scio.loadmat('ex7faces.mat')   
xdata3=data3['X']
print xdata3.shape

data4=scio.loadmat('bird_small.mat')
xdata4=data4['A']
xdata4=1.0*xdata4/max(xdata4.reshape(-1,))
print xdata4.shape
a,b,c=np.shape(xdata4)
K=3
M,N=xdata2.shape
indx=np.zeros(M)
# sent=np.zeros(M)
initial_center=np.random.randint(M,size=3)
# print xdata2[initial_center]
centroids=np.zeros((K,N))
max_iter=3
center=xdata2[initial_center]
error=np.ones((K,N))
count=0
while error.all()>1.0e-7:
	count=count+1
	for i in xrange(M):
		xpoint=np.array([xdata2[i]]*3)     #turn into 3*2 array
		distance=np.sum((xpoint-center)**2,axis=1)
		# sent[i]=min(distance)
		indx[i]=np.argmin(distance)
	for i in xrange(K):
		centroids[i,:]=np.mean(xdata2[indx==i],axis=0)
		# centroids[1,:]=np.mean(xdata2[indx==1],axis=0)
		# centroids[2,:]=np.mean(xdata2[indx==2],axis=0)
	error=centroids-center
	center=centroids
	print error
print 'the loop times:',count
#different cluster
class1=xdata2[indx==0]
class2=xdata2[indx==1]
class3=xdata2[indx==2]
plt.figure()
plt.plot(class1[:,0],class1[:,1],'gx',markersize=8)
plt.plot(class2[:,0],class2[:,1],'k*')
plt.plot(class3[:,0],class3[:,1],'bd')
plt.plot(centroids[:,0],centroids[:,1],'ro')
plt.grid(True)
plt.figure()
plt.plot(xdata1[:,0],xdata1[:,1],marker='o',color='w')
plt.grid(True)
# plt.figure()
# plt.imshow(xdata4,clim=(-1, 1), aspect=1,cmap=plt.cm.gray)
# plt.xticks([])   #get rid of ticks
# plt.yticks([])
plt.show()
